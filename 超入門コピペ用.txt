from IPython.display import Image
import matplotlib.pyplot as plt
import numpy as np


# データ型
num = 100
num

num = 3.14
num


num ='数字'
num


x = 10
#割り算
x/3


# 余り
x % 3


#べき乗
3 ** 2

y = 5
y = y+12
y

y = 5
y += 12
y

# 文字連結
print ("hello"+"world")
print ("hello" * 3)
print('Hello\nNice to meet you!')


# インデント
a = 3
if a == 5:
	print ("AAA")    # if文の対象
	print ("BBB")    # if文の対象
print ("CCC")    


s = 7
if s > 5:
    if s == 7:
        print('Bingo')
    print('Bye')
print('End')


# コメント
# コメントになる
a = 1  # ここからコメント
'''
　これもコメント
'''
x = 1


# リスト
d = ['東京都', '神奈川県', '大阪府']
d


d[1]

d[1] = '北海道'
d


# in演算子
d = [1, 2, 3, 4, 5]
print(3 in d)

print(9 in d)


# 長さ
xlist = [1, 3, 6, 2, 90, 8, 11,27]
len(xlist)


# タプル
t = ('東京都', '神奈川県', '大阪府')
t[1]

t[1] = '北海道'

#辞書
a ={'Tokyo': 50,'Osaka': 45,'Hakata': 30}
a1 = a['Tokyo']
a2 = a['Osaka']
a3 = a['Hakata']
print(a1)
print(a2)
print(a3)

# 配列
a1 = np.array([1, 2, 3])
a1

# shape 配列の形状を表示
a1.shape

a2 = np.array([[1,2,3], [2,3,4]])
a2

a2.shape

a3 = np.array([[1], [2], [3]])
a3

a3.shape


# 3×2×43×2×4の直方体上に並んだ3次元配列
a4 = np.arange(3 * 2 * 4).reshape(3, 2, 4)
a4

x = np.arange(10)
x


# 配列の要素
x[2]


x2 = np.array([[1,7,3], [2,8,9]])
x2

x2[0, 1]


# 内包表現
x = [1,2,3,4]
y = [i*2 for i in x]
print(y)


# 配列のスライスによる指定
x = np.arange(10)
x

x[2:4]

x[:4]

x[4:]

y = np.arange(12).reshape(3, 4)
y

y[:, 0]

y[1, :]

y[:, [1,2]]


# リストと配列の違い
list1 = [[0, 1, 0], [0, 1, 0]]
list1.shape


ar1 = np.array([[0, 1, 0], [0, 1, 0]])
ar1.shape

list1 = [[0, 0, 0], [0, 0, 0]]
list1[0][1] = 1
list1

# 内包表現で２次元配列を作成
list2 = [[0 for i in range(3)] for j in range(2)]
list2

list2[0][1] = 1
list2


# これでも作れるが・・ [0]*3 というように作成すると要素指定して変更すると結果が異なる
list3 = [[0]*3]*2
list3

list3[0][1] = 1
list3

# form
a = 10
b = 2
c = a + b
print('答え:{0}'.format(c))

banana = 50
tomato = 100
total = banana + tomato
print('合計：{}円'.format(total))

banana = 50
tomato = 100
total = banana + tomato
print('バナナ：{0}円 トマト：{1}円 合計：{2}円'.format(banana, tomato, total))

name = "Endo"
score = 52.6

# %で文字列埋め込み(整数は%d)
print("name: %s,score:%f" %(name,score))

# 桁数表示幅を指定する。
# %10s =10の幅を持たせる。%10.2f=10の幅を持たせて小数点2桁にする。
print("name: %10s,score:%10.2f" %(name,score))

# 左揃えにする。
print("name: %-10s,score:%-10.2f" %(name,score))



# if 文
x = 1
if x == 0:
    print('x = 0')
else:
    print('x != 0') 


x = 1
if x == 0:
    print('x = 0')
elif x == 1:
    print('x = 1') 
else:
    print('x != 0 ans x != 0')


# for 文
# for 変数名 in イテラブルオブジェクト:
#    処理
data_list = [5, 3, 7, 4, 10, 9, 6]
new_list = []
for num in data_list:
	if num % 2 == 0:
		new_num = num * 2
		new_list.append(new_num)
print(new_list)


# 特定の要素をスキップ  continue
v = ['リンゴ', 'バナナ', 'ケーキ']
for name in v:
    if name == 'ケーキ':
        print('!!スキップ!!')
        continue
    print(name)


# range()
for i in range(3):
    print(i)


for i in range(3, 10):
    print(i)

for i in range(3, 10, 2):
    print(i)


# リストの内包表現
squares = [i**2 for i in range(5)]
print(squares)

new_list = [num * 2 for num in data_list if num % 2 == 0]
print(new_list)


datas = ['a', 'b', 'c']
for v in datas:
    print(v) # listの各値が表示される


dic = {'key1': 110, 'key2': 270, 'key3': 350}
for key in dic:
    print(key, dic[key])


dic = {'key1': 110, 'key2': 270, 'key3': 350}
for value in dic.values():
    print(value) # 値が出力される


# enumerate はリストの要素とインデクスを出力する
v = ['リンゴ', 'バナナ', 'ケーキ']
for i, name in enumerate(v):
    print(i, name)


# zip 複数の変数　まとめて出力
v = ['リンゴ', 'バナナ', 'ケーキ']
num = [24, 50, 18]
for name, n in zip(v, num):
    print(name, n)



# append()
mylist = ["Blue", "Red", "Green"]
print(mylist)

mylist.append("White")
print(mylist)

a = []
for i in range(10):
    a.append(i**2)
print(a)


# split()
test = "orange apple banana strawberry"
test.split(",") # test というリストを 区切り文字” , ” で区切る

test = "orange apple banana strawberry"
test.split() #引数に何も指定しない場合、スペースやタブ等で自動的に区切る



# enumerate
lists = ["Apple","Orange","Tomato","Potato","Banana"]
i = 0
for list1 in lists:
    print("Index:[{}] , Food:{}".format(i,list1))
    i += 1


for index,list1 in enumerate(lists):
    print("index:[{}] , food:{}".format(index,list1))


for index, list1 in enumerate(lists, start=3):
    print("index:[{}] , food:{}".format(index,list1))


# zip()
lists = ["Apple","Orange","Tomato","Potato","Banana"]
prices =[110, 90, 85, 100, 130]

for lst, pr in zip(lists, prices):
    print("{0}は{1}円です".format(lst, pr))



# random
from numpy.random import *
random() # 0.0〜1.0の間の数値（浮動小数点）を返す

uniform(10, 100) #[10.0, 100.0]の実数値をかえす

randint(10, 100) #引数で指定した10〜100の範囲のランダムな整数値を返す

randint(0,100,20)   

import random
random.randrange(10, 50, 2)


from numpy.random import *
x = randn()         # 標準正規分布 (平均0, 標準偏差1)
y = randn(10)       # 標準正規分布を10個生成
x
y


# break
data_list = [1, 2, 3] # 空のリスト
for data in data_list:
    print(data)
    if data > 1:
        break
else:
    print('ループ処理が終わりました')


# while
is_conti = True # ループ処理を続行するか
 
while is_conti:
    print('キーを入力してください')
    c = input()
 
    if c == 'end':
        is_conti = False
    else:
        print(c + 'が入力されました')
        is_conti = False

print('ループ処理が終わりました')


# 関数
def ex_func(x, y):
    z = x + y
    return z
 
z = ex_func(1, 2)
print(z)



def  ex_func(arg1, arg2):
	print(arg1, arg2)

ex_func('a', 'b') # 順番に引数を指定する
ex_func(arg1='c', arg2='d') # キーワードを指定する


def pass_test():
    # 関数の中身を今書かないであとで記述したい時にpassを入れる。
    pass

msg = pass_test()
# 何も返ってこないので`None`が返ってくる。
print (msg)


msg = "Global" #グローバル変数

def hoge():
    #関数の中で宣言された変数はこの関数の中でのみ有効である。
    #スコープ
    msg = "Local" # ローカル変数
    print (msg)
hoge()
print(msg)



# lamada
def nibai(n):
    return n * 2

x = nibai(10)
print(x)


lamda_nibai = lambda n: n * 2
print(lamda_nibai(10))


abs = lambda x : x if x >=0 else -x
print(abs(-17.5))


def func(s):
    return s+ "タワー"

sampleList = ["東京", "マリン", "べイ"]
newList = []
for s in sampleList:
    newList.append(func(s))

print(newList)


newList2 = list(map(lambda s: s + "タワー", sampleList))
print(newList2)


val = ['Mike', 'Bob', 'Cris'] # デフォルトではアルファベット順
s = sorted(val)
s

s = sorted(val, key=lambda x: x[1]) # 2文字目のアルファベット順
s

num_list = [0,1,2,3,4,5,6,7,8,9]
def jijo(x):
    xx = x**2
    return xx
ans1 = list(map(jijo,num_list))
ans1

ans2 = list(map(lambda x:x**2,range(10)))
ans2

# filter 関数を使ったラムダ式
my_list = [ 1,2,3,4,5, 6, 7 ]
new_list= list(filter(lambda x: x>4 , my_list))
print(new_list) 


# クラス
class Xteam:   # クラス名

    def __init__(self):      # コンストラクタ
        self.name = ""

    def getName(self):  # メソッド名
        return self.name

    def setName(self, name):   # メソッド名   
        self.name = name

a = Xteam() 
a.setName('Suzuki')                      
print (a.getName() )   



# コンストラクタ
class User:

    #selfはこのクラスから作られるインスタンスを指します。
    def __init__(self,name):
        # インスタンス変数
        self.name = name

sato = User("佐藤")
ike = User("池田")

print(sato.name)
print(ike.name)


# クラス変数
class User:
    # クラス変数
    #   インスタンスオブジェクト間で
    #   共有される変数
    common = 100
    
    # インスタンス変数
    #   インスタンスオブジェクト間で
    #   共有しない変数
    def __init__(self, name):
        self.name =  name
        self.val = 0

sato = User("佐藤")
ike = User("池田")
print(ike.name)
print(sato.common)


#参照できるか
print(User.common)


#参照できるか
print(User.name)



# ファイル操作
f = open('todo.txt', encoding='utf-8')
str = f.read()
print(str)
f.close()

with open('todo.txt', encoding='utf-8') as f:
    str = f.read()
print(str)


f = open('memo.txt', 'w', encoding='utf-8')
f


f.write('今日は')

f.write('疲れたので早く寝る\n')
f.close()


f = open('memo.txt', encoding='utf-8')
str = f.read()
print(str)


# 正規表現
import re
rx = r'ab+' # + は１回以上の繰り返し　rをつけるとraw文字列として扱われる（バックスラッシュが特別な意味を持つ場合があるため）
text = "abbabbabaaabb"
ans = re.match(rx, text)
ans


address = "123-7777 東京都千代田区"
postCode = re.match('[0-9]{3}-[0-9]{4}' , address) # { }はケタ数
print (postCode)


# グラフ
import matplotlib.pyplot as plt
x = np.arange(0, 6, 0.1)  # 0から6まで0.1刻みで
y = np.sin(x)

plt.plot(x, y)
plt.show()


def sigmoid(x):
    return 1 / (1 + np.exp(-x))    

X = np.arange(-5.0, 5.0, 0.1)
Y = sigmoid(X)
plt.plot(X, Y)
plt.ylim(-0.1, 1.1)
plt.show()


def step_function(x):
    return np.array(x > 0, dtype=np.int)

X = np.arange(-5.0, 5.0, 0.1)
Y = step_function(X)
plt.plot(X, Y)
plt.ylim(-0.1, 1.1)  # 図で描画するy軸の範囲を指定
plt.show()



# 補助線など
import math
pi = math.pi

x = np.linspace(0, 2*pi, 100)
sin_y = np.sin(x)
cos_y = np.cos(x)  #新たにcosを計算

plt.plot(x, sin_y, label='sin')
plt.plot(x, cos_y, label='cos')  #cosの値をプロット

#グラフタイトル
plt.title('Sin And Cos Graph')

#グラフの軸
plt.xlabel('X-Axis')
plt.ylabel('Y-Axis')

#グラフの凡例
plt.legend()
plt.show()



# 縦に並べる
x = np.arange(0, 6, 0.1)
y1 = np.sin(x)
y2 = np.cos(x)
 
plt.subplot(2,1,1)
plt.plot(x,y1)
 
plt.subplot(2,1,2)
plt.plot(x,y2)
plt.show()


# 横にならべる
plt.subplot(1,2,1)
plt.plot(x,y1)
 
plt.subplot(1,2,2)
plt.plot(x,y2)


# 2x2 に並べる
plt.subplot(2,2,1)
plt.plot(x,y1)
 
plt.subplot(2,2,2)
plt.plot(x,y2)
 
plt.subplot(2,2,3)
plt.plot(x,y1)
 
plt.subplot(2,2,4)
plt.plot(x,y2)


# 折れ線
import matplotlib.pyplot as plt

years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
gdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]

plt.plot(years, gdp, color='red', marker='o', linestyle='solid')
plt.title("Nominal GDP")
plt.ylabel("Billions of $")
plt.grid(b=True, which='major', color='#666666', linestyle='--') # グリッド線の表示
plt.show()


import numpy as np
import matplotlib.pyplot as plt
 
# 平均 50, 標準偏差 10 の正規乱数を1,000件生成
x = np.random.normal(50, 10, 1000)
 
# ヒストグラムを出力
plt.hist(x, bins=16)



import matplotlib.pyplot as plt

x = 2 * np.random.rand(100, 1)
y = 4 + 3 * x + np.random.randn(100, 1)

plt.plot(x, y, "b.")
plt.xlabel("$x$", fontsize=12)
plt.ylabel("$y$", rotation=0, fontsize=12)
plt.axis([0, 2, 0, 15])
plt.show()